// Mocks generated by Mockito 5.0.12 from annotations
// in exame_todo_list/test/features/screen/todo_page_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:exame_todo_list/features/events/todo_event.dart' as _i5;
import 'package:exame_todo_list/features/screens/todo/todo_bloc.dart' as _i4;
import 'package:exame_todo_list/features/state/todo_state.dart' as _i2;
import 'package:flutter_bloc/flutter_bloc.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeTodoState extends _i1.Fake implements _i2.TodoState {}

class _FakeStreamSubscription<T> extends _i1.Fake
    implements _i3.StreamSubscription<T> {}

/// A class which mocks [TodoBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoBloc extends _i1.Mock implements _i4.TodoBloc {
  MockTodoBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TodoState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeTodoState()) as _i2.TodoState);
  @override
  _i3.Stream<_i2.TodoState> get stream => (super.noSuchMethod(
      Invocation.getter(#stream),
      returnValue: Stream<_i2.TodoState>.empty()) as _i3.Stream<_i2.TodoState>);
  @override
  _i3.Stream<_i2.TodoState> mapEventToState(_i5.TodoEvent? event) =>
      (super.noSuchMethod(Invocation.method(#mapEventToState, [event]),
              returnValue: Stream<_i2.TodoState>.empty())
          as _i3.Stream<_i2.TodoState>);
  @override
  void add(_i5.TodoEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i5.TodoEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i6.Transition<_i5.TodoEvent, _i2.TodoState>> transformEvents(
          _i3.Stream<_i5.TodoEvent>? events,
          _i6.TransitionFunction<_i5.TodoEvent, _i2.TodoState>? transitionFn) =>
      (super.noSuchMethod(
              Invocation.method(#transformEvents, [events, transitionFn]),
              returnValue:
                  Stream<_i6.Transition<_i5.TodoEvent, _i2.TodoState>>.empty())
          as _i3.Stream<_i6.Transition<_i5.TodoEvent, _i2.TodoState>>);
  @override
  void emit(_i2.TodoState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onTransition(_i6.Transition<_i5.TodoEvent, _i2.TodoState>? transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i6.Transition<_i5.TodoEvent, _i2.TodoState>> transformTransitions(
          _i3.Stream<_i6.Transition<_i5.TodoEvent, _i2.TodoState>>?
              transitions) =>
      (super.noSuchMethod(
              Invocation.method(#transformTransitions, [transitions]),
              returnValue:
                  Stream<_i6.Transition<_i5.TodoEvent, _i2.TodoState>>.empty())
          as _i3.Stream<_i6.Transition<_i5.TodoEvent, _i2.TodoState>>);
  @override
  _i3.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.StreamSubscription<_i2.TodoState> listen(
          void Function(_i2.TodoState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription<_i2.TodoState>())
          as _i3.StreamSubscription<_i2.TodoState>);
  @override
  void onChange(_i6.Change<_i2.TodoState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}
